import {_mqtt_conn} from './_conn.jsy'
import {_mqtt_topic_router} from './_router.jsy'
import {_mqtt_dispatch} from './_dispatch.jsy'

export default MQTTBaseClient
export class MQTTBaseClient ::
  constructor(opt={}) ::
    this._conn_ = _mqtt_conn @ this,
      this._init_dispatch(opt, this)

  // Handshaking Packets

  async connect(pkt={}) ::
    let {client_id: cid} = pkt
    if ! cid ::
      pkt.client_id = cid = this.init_client_id(['u8-mqtt--', ''])
    else if Array.isArray(cid) ::
      pkt.client_id = cid = this.init_client_id(cid)
    else :: this.client_id = cid

    if null == pkt.keep_alive ::
      pkt.keep_alive = 60

    const res = await this._conn_
      .send_connect @ 'connect', pkt, 'connack'

    // TODO: merge with server's keep_alive frequency
    this._conn_.ping(pkt.keep_alive)
    return res

  async disconnect(pkt={}) ::
    const res = await this._send('disconnect', pkt)
    this._conn_.reset()
    return res

  auth(pkt={}) ::
    return this._send('auth', pkt, 'auth')

  ping() :: return this._send('pingreq', null, 'pingresp')


  // alias: sub
  subscribe(pkt, ex) ::
    pkt = _as_topics(pkt, ex)
    return this._send('subscribe', pkt, pkt)

  // alias: unsub
  unsubscribe(pkt, ex) ::
    pkt = _as_topics(pkt, ex)
    return this._send('unsubscribe', pkt, pkt)

  // alias: sub_route
  subscribe_topic(topic_route, ...args) ::
    let topic = topic_route.replace(/[:*].*$/, '#')
    this.on_topic @ topic_route, true, args.pop() // handler
    this.subscribe @ [[ topic ]], args.pop() // ex
    return this


  // alias: pub
  publish(pkt) :: return _pub(this, pkt)
  post(topic, payload) :: return _pub(this, {qos:0, topic, payload})
  send(topic, payload) :: return _pub(this, {qos:1, topic, payload})
  json_post(topic, msg) :: return _pub(this, {qos:0, topic, msg, arg:'msg'})
  json_send(topic, msg) :: return _pub(this, {qos:1, topic, msg, arg:'msg'})



  // Utility Methods

  init_client_id(parts) ::
    let cid = this.client_id

    if undefined === cid ::
      this.client_id = cid = (
        #IF PLAT_WEB
          this.sess_client_id(parts)
        #ELSE
          this.new_client_id(parts)
        )

    return cid

  new_client_id(parts) ::
    return [parts[0], Math.random().toString(36).slice(2), parts[1]].join('')

  #IF PLAT_WEB
    sess_client_id(parts) ::
      let key = `client_id ${parts.join('')}`
      let cid = sessionStorage.getItem(key)
      if null == cid ::
        cid = this.new_client_id(parts)
        sessionStorage.setItem(key, cid)
      return cid


  // Internal API

  /* async _send(type, pkt) -- provided by _conn_ and transport */

  _init_router(opt) ::
    const router = _mqtt_topic_router(this)
    this.on_topic = router.add
    return this.router = router

  _init_dispatch(opt) ::
    const router = this._init_router(opt, this)

    const tgt = @{}
      __proto__: opt.on_mqtt_type || {}
      mqtt_publish: router.invoke

    return _mqtt_dispatch @ this, tgt


::
  const p = MQTTBaseClient.prototype
  Object.assign @ p, @{}
    pub: p.publish
    sub: p.subscribe
    unsub: p.unsubscribe
    sub_topic: p.subscribe_topic

  /*
    p.on_mqtt_type = {
      mqtt_auth(pkt, ctx) ::
      mqtt_connect(pkt, ctx) ::
      mqtt_connack(pkt, ctx) ::
      mqtt_disconnect(pkt, ctx) ::

      mqtt_subscribe(pkt, ctx) ::
      mqtt_unsubscribe(pkt, ctx) ::

      mqtt_pingreq(pkt, ctx) ::
      mqtt_pingresp(pkt, ctx) ::
    }
  */


function _pub(self, pkt) ::
  let key, {qos, msg, payload} = pkt
  if undefined === payload ::
    if undefined === msg ::
      const arg = pkt.arg || 'payload'
      return v => _pub @ self, {...pkt, [arg]: v}

    pkt.payload = JSON.stringify(msg)

  if (1 === qos) key = pkt
  return self._send('publish', pkt, key)

function _as_topics(pkt, ex) ::
  if 'string' === typeof pkt ::
    return {topics:[pkt], ... ex}
  if pkt[Symbol.iterator] ::
    return {topics:[... pkt], ... ex}
  return ex ? {...pkt, ...ex} : pkt

