
export const _mqtt_cmdid_dispatch = @{}
  create(target) ::
    return @{} __proto__: this, target, hashbelt: [new Map()]

  bind_pkt_future(_pkt_id=100) ::
    let {hashbelt} = this

    let _tmp_ // use _tmp_ to reuse _by_key closure
    let _by_key = answer_monad =>
      hashbelt[0].set(_tmp_, answer_monad)

    return @\ pkt_or_key ::
      if 'string' === typeof pkt_or_key ::
        _tmp_ = pkt_or_key
      else ::
        _pkt_id = (_pkt_id + 1) & 0xffff
        _tmp_ = pkt_or_key.pkt_id = _pkt_id

      return new Promise(_by_key)

  answer(key, pkt) ::
    for let map of this.hashbelt ::
      let answer_monad = map.get(key)
      if undefined !== answer_monad ::
        map.delete(key)

        answer_monad([pkt, /*err*/]) // option/maybe monad
        return true
    return false

  rotate_belt(n) ::
    let {hashbelt} = this
    hashbelt.unshift @ new Map()
    for let old of hashbelt.splice(n || 5) ::
      for let answer_monad of old.values() ::
        answer_monad([/*pkt*/, 'expired']) // option/maybe monad

  cmdids: @!
    return @[]
      @=>{}    // 0x0 reserved
      by_evt   // 0x1 connect
      by_type  // 0x2 connack
      by_evt   // 0x3 publish
      by_id    // 0x4 puback
      by_id    // 0x5 pubrec
      by_id    // 0x6 pubrel
      by_id    // 0x7 pubcomp
      by_evt   // 0x8 subscribe
      by_id    // 0x9 suback
      by_evt   // 0xa unsubscribe
      by_id    // 0xb unsuback
      by_type  // 0xc pingreq
      by_type  // 0xd pingresp
      by_evt   // 0xe disconnect
      by_type  // 0xf auth


    function by_id(disp, pkt) ::
      disp.answer @ pkt.pkt_id, pkt

    function by_type(disp, pkt, ctx) ::
      disp.answer @ pkt.type, pkt
      by_evt(disp, pkt, ctx)

    async function by_evt({target}, pkt, ctx) ::
      let fn = target[`mqtt_${pkt.type}`]
        || target.mqtt_pkt

      if undefined !== fn ::
        await fn.call(target, pkt, ctx)


