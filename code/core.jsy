import MQTTBaseClient from './base.jsy'

#IF PLAT_NODEJS
  import {connect as tcp_connect} from 'net'


export default MQTTCoreClient
export class MQTTCoreClient extends MQTTBaseClient ::
  static _with_session(mqtt_session) ::
    this.prototype._mqtt_session = mqtt_session

  constructor(opt={}) ::
    super(opt)
    this.with_live(opt.on_live)
    this.with_reconnnect(opt.on_reconnect)


  // on_live(client) ::
  with_live(on_live) ::
    if on_live ::
      this.on_live = on_live

    return this

  // on_reconnect(client) ::
  with_reconnnect(on_reconnnect) ::
    if on_reconnnect ::
      this.on_reconnnect = on_reconnnect

      if ! this._conn_.is_set ::
        on_reconnnect(this)

    return this


  with_async_iter(async_iter, write_u8_pkt) ::
    const on_mqtt_chunk = this._conn_.set @
      this._mqtt_session(),
      write_u8_pkt

    this._msg_loop = @!>
      async_iter = await async_iter
      for await (const chunk of async_iter)
        on_mqtt_chunk(chunk)

      this._conn_.reset()

    return this


  #IF PLAT_DENO
    with_tcp(port, hostname) ::
      if !Number.isFinite(port) ::
        ({port, host: hostname} = port)

      Deno.connect @:
        port: port || 1883, hostname, transport: 'tcp'
      .then @\ conn =>
        this.with_async_iter @
          Deno.iter(conn),
          u8_pkt => conn.write(u8_pkt)

      return this


  #IF PLAT_NODEJS
    with_tcp(port, hostname) ::
      if !Number.isFinite(port) ::
        ({port, host: hostname} = port)

      const sock = tcp_connect(port, hostname)
      return this.with_stream(sock)


  #IF HAS_STREAM
    with_stream(read_stream, write_stream) ::
      if undefined === write_stream ::
        write_stream = read_stream

      read_stream.once @ 'end', this._conn_.reset
      return this.with_async_iter @ read_stream,
        u8_pkt => write_stream.write(u8_pkt)




  with_websock(websock) ::
    if null == websock ::
      websock = 'ws://127.0.0.1:9001'

    if websock.origin || 'string' === typeof websock ::
      websock = new WebSocket(new URL(websock), ['mqtt'])

    websock.binaryType = 'arraybuffer'

    let ready, {readyState} = websock
    if 1 !== readyState ::
      if 0 !== readyState ::
        throw new Error @ 'Invalid WebSocket readyState'

      ready = new Promise( y =>
        websock.addEventListener('open', y, {once: true}))


    const {_conn_} = this
    const on_mqtt_chunk = _conn_.set @
      this._mqtt_session(),
      async u8_pkt => @
        await ready
        websock.send(u8_pkt)

    websock.addEventListener @ 'close',
      @::
        delete websock.onmessage
        _conn_.reset()

      {once: true}

    websock.onmessage = evt =>
      on_mqtt_chunk @
        new Uint8Array(evt.data)

    return this

