import { ao_defer_v } from 'roap'
export { ao_defer_v }

export function _mqtt_conn(client, [on_mqtt, pkt_future]) ::
  let _q_init = ao_defer_v(), _q_ready = ao_defer_v()
  let _send_ready = async (...args) => (await _q_ready[0])(...args)
  let _send_mqtt_pkt, _has_connected
  client._send = _send_ready

  return @{}
    async when_ready() :: await _q_ready[0]

    ping: _ping_interval @=> _send_mqtt_pkt?.('pingreq')

    reset(err) ::
      if ! _send_mqtt_pkt :: return

      if err ::
        _q_init[2](err)

      _send_mqtt_pkt = null
      _q_init = ao_defer_v()
      client._send = _send_ready

      // call client.on_conn_reset in next promise microtask
      client.conn_emit('on_disconnect', false===err, err)

    async send_connect(... args) ::
      if ! _send_mqtt_pkt ::
        await _q_init[0] // _send_mqtt_pkt is set before fulfilled

      // await connack response
      let res = await _send_mqtt_pkt(...args)
      if 0 == res[0].reason ::
        _has_connected = true
        // resolve _q_ready[0] with _send_mqtt_pkt closure
        _q_ready[1](client._send = _send_mqtt_pkt)
        _q_ready = ao_defer_v()
        client.conn_emit('on_ready')

      return res

    is_set: @=> !! _send_mqtt_pkt
    set(mqtt_ctx, send_u8_pkt) ::
      if _send_mqtt_pkt ::
        throw new Error('Already connected')

      mqtt_ctx = mqtt_ctx.mqtt_stream()
      let sess_ctx = {mqtt: client}
      let on_mqtt_chunk = u8_buf =>
        on_mqtt(mqtt_ctx.decode(u8_buf), sess_ctx)

      _send_mqtt_pkt = async (type, pkt, key) => ::
        let res = undefined !== key
          ? pkt_future(key) : true

        await send_u8_pkt @
          mqtt_ctx.encode_pkt(type, pkt)

        return res

      _q_init[1](_send_mqtt_pkt) // resolve _q_init with _send_mqtt_pkt closure

      // call client.on_live in next promise microtask
      client.conn_emit('on_live', _has_connected)
      return on_mqtt_chunk


function _ping_interval(send_ping) ::
  let tid
  return @\ td ::
    tid = clearInterval(tid)
    if td ::
      tid = setInterval(send_ping, 1000 * td)
      #IF PLAT_DENO
        // ensure the interval allows the Deno event loop to exit
        Deno.unrefTimer(tid)
      #ELSE
        // ensure the interval allows the NodeJS event loop to exit
        tid.unref?.()
      return true

