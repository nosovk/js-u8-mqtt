export function _mqtt_conn(client, [on_mqtt, pkt_future]) ::
  const q0 = _tiny_deferred_queue()
  const q = _tiny_deferred_queue()

  const _asy_send = async (...args) =>
    (await q)(...args)
  let _send = client._send = _asy_send

  const _ping = () => client._send('pingreq')
  let tid_ping, _is_set = false

  return @{}
    is_live: @=> _asy_send !== _send
    is_set: @=> _is_set

    reset() ::
      tid_ping = clearInterval(tid_ping)
      client._send = _send = _asy_send
      _is_set = false

      // call client.on_reconnect in next promise microtask
      Promise.resolve(client)
        .then(client.on_reconnect)

    ping(td) ::
      tid_ping = clearInterval(tid_ping)
      if td ::
        tid_ping = setInterval(_ping, 1000 * td)
        if tid_ping.unref ::
          tid_ping.unref()

    async send_connect(... args) ::
      if _asy_send === _send ::
        _send = await q0

      // await connack response
      const res = await _send(...args)

      client._send = _send
      q.notify(_send)
      return res

    set(mqtt_session, send_u8_pkt) ::
      _is_set = true

      const [mqtt_decode, mqtt_encode] =
        mqtt_session()

      const on_mqtt_chunk = u8_buf =>
        on_mqtt(
          mqtt_decode(u8_buf),
          {mqtt: client})

      _send = async (type, pkt, key) => ::
        const res = undefined !== key
          ? pkt_future(key) : true

        await send_u8_pkt @
          mqtt_encode(type, pkt)

        return res


      q0.notify(_send)

      // call client.on_live in next promise microtask
      Promise.resolve(client)
        .then(client.on_live)

      return on_mqtt_chunk


function _tiny_deferred_queue() {
  const q = [] // tiny resetting deferred queue
  q.then = y => { q.push(y) }
  q.notify = v => { for (const fn of q.splice(0,q.length)) fn(v) }
  return q
}
