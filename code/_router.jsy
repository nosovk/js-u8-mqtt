// Use [regexparam][] for url-like topic parsing
//  [regexparam]: https://github.com/lukeed/regexparam

import {parse as _rxp_parse} from 'regexparam'

function _ignore(pkt, params, ctx) :: ctx.done = true

export function _mqtt_topic_router() ::
  let pri_lsts = [[],[]]
  let find = topic => _mqtt_routes_iter(pri_lsts, topic)

  return @{} find,

    add(topic_route, ...args) ::
      let fn = args.pop()
      let priority = args.pop()

      if 'function' !== typeof fn ::
        if false === fn ::
          fn = _ignore
        else throw new TypeError()

      let rte = _rxp_parse @
        topic_route.replace(/[+#]$/, '*')

      rte.tgt = fn
      pri_lsts[priority ? 0 : 1].push(rte)
      return this

    async invoke(pkt, ctx) ::
      ctx.idx = 0

      for let [fn, params] of find(pkt.topic) ::
        await fn(pkt, params, ctx)

        if ctx.done ::
          break
        else ctx.idx++

      let {pkt_id, qos} = pkt
      if 1 === qos ::
        await ctx.mqtt._send('puback', {pkt_id})


export function * _mqtt_routes_iter(all_route_lists, topic) ::
  for let route_list of all_route_lists ::
    for let route of route_list ::
      let res = _mqtt_route_match_one(topic, route)
      if undefined !== res ::
        yield res


export function _mqtt_route_match_one(topic, {keys, pattern, tgt}) ::
  let match = pattern.exec('/'+topic)
  if null === match ::
    return

  if false === keys ::
    let {groups} = match
    if ! groups ::
      return [tgt]

    let params = {}
    for let k in groups ::
      params[k] = groups[k]

    return [tgt, params]

  if 0 === keys.length ::
    return [tgt]

  let params = {}
  for let i=0; i<keys.length; i++ ::
    params[ keys[i] ] = match[1+i]
  return [tgt, params]

